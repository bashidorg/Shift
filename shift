#!/bin/bash
#
# shift - wm setup changer automated written in BASH with backup support.
#
# Created by : blackcat
# Gihub      : https://github.com/noirecat
#

# Speed up script by not using unicode
export LC_ALL=C
export LANG=C

shopt -s nullglob nocasematch

source /usr/share/bash-completion/completions/shift

# Colors
red='\e[1;31m'
yellow='\e[0;33m'
green='\033[92m'
blue='\e[1;34m'
orange='\e[38;5;166m'
cyan='\e[0;36m'
white='\e[1;37m'
reset="\033[00m"

# Variables
export input=$2
export input1=$3
export input2=$4

exec 2> /dev/null


# <------------------------- Appearance configuration -------------------------> #


# Check wm what is being used later,then overwriting the theme with input variable
themes(){

    old=$(cat $HOME/.config/openbox/rc.xml | sed -n '/<theme>/{n;p}' | awk -F "<|>" '{print $3}')   
    old1=$(grep 'THEME=' $HOME/.config/windowchef/windowchefrc | awk -F "THEME=" '{print $2}' | sed 's/"//g')
    gtk=$(grep "gtk-theme-name" $HOME/.gtkrc-2.0 | cut -f2- -d= | sed 's/"//g' )

    if local wm=$(wmctrl -m | grep Name | cut -d: -f2)
    then

        if [ $wm == Openbox ]
        then
            sed -i "s/$old/$input/g" $HOME/.config/openbox/rc.xml
            #sed -i "s/$gtk/$input1/g" $HOME/.gtkrc-2.0                   

        elif [ $wm == windowchef ]
        then
            sed -i "s/$old1/$input/g" $HOME/.config/windowchef/windowchefrc
            #sed -i "s/$gtk/$input1/g" $HOME/.gtkrc-2.0       

        elif [ $wm == Xfwm4 ]
        then
		   if [ $input1 == --icons ]
        	   then
                  xfconf-query -c xsettings -p /Net/IconThemeName -s "${input2}"
		   fi
        
            xfconf-query -c xsettings -p /Net/ThemeName -s "${input}"
            xfconf-query -c xfwm4 -p /general/theme -s "${input}"
        
        else
            echo "Can't defined window manager."

        fi
    fi
}

icons(){

    old=$(grep "icon-theme-name" $HOME/.gtkrc-2.0 | cut -f2- -d= | sed 's/"//g')

    if local wm=$(wmctrl -m | grep Name | cut -d: -f2)
    then

        if [ $wm == Xfwm4 ]
        then
            xfconf-query -c xsettings -p /Net/IconThemeName -s "${input}"
    
        elif [ ! -z $wm ]
        then
            sed "s/$old/$input1/g" $HOME/.gtkrc-2.0
        
        else
            echo "ERROR"

        fi
    
    fi
}

set_wall(){

     if [ -f /usr/bin/feh ]
     then
          feh --bg-fill $input > $HOME/.fehbg

     elif [ -f /usr/bin/nitrogen ]
     then
          nitrogen --set-zoom-fill $input

     else
          hsetroot -fill $input
     fi

}


# <------------------------- Restart -------------------------> #

kill(){
     pkill -USR1 -x lemonbar
	killall -q polybar tint2
}

# Reload all desktop configuration
reload_wm(){
    old=$(grep 'polybar' ~/.config/openbox/autostart | awk -F 'polybar' '{print $3}' | sed 's/^.//')
    old1=$(grep 'tint2' ~/.config/openbox/autostart  | awk -F 'tint2' '{print $3}' | sed 's/^.//; s/.$//' )
    old2=$( grep 'lemonbar' ~/.config/openbox/autostart | awk -F 'lemonbar' '{print $2}' | sed 's/^.//')
    pos=$(grep 'polybar' ~/.config/openbox/autostart | cut -d ' ' -f2)

    w=$(grep '.config/lemonbar' ~/.config/windowchef/windowchefrc | awk -F 'lemonbar' '{print $2}' | sed 's/^.//')
    w1=$(grep '.config/polybar' ~/.config/windowchef/windowchefrc | awk -F 'lemonbar' '{print $2}' | sed 's/^.//')
    w2=$(grep 'polybar' ~/.config/windowchef/windowchefrc | cut -d ' ' -f2)

    if local wm=$(wmctrl -m | grep Name | cut -d: -f2)
    then
     
        # restart openbox configuration
        if [ $wm == Openbox ]
        then
		  openbox --reconfigure

            if  [ $input1 == --lemonbar ]
            then
            	sed -i "s/$old2/$input2/g" ~/.config/openbox/autostart
			
			kill			

            	source $HOME/.config/lemonbar/$input2 &
			dishown		

            elif [ $input1 == --polybar ]
            then
               sed -i "s/$old/$input2/g" ~/.config/openbox/autostart

            	kill

               polybar $pos -c ~/.config/polybar/$input2 &
			dishown

           elif [ $input1 == --tint2 ]
           then
               sed -i "s/$old1/$input2/g" ~/.config/openbox/autostart

			kill
			
			tint2 -c ~/.config/tint2/$input2.tint2rc &
             	dishown

		elif [ -z $input1 ]
		then
			""
           else
                echo "Didn't find the panel process"

           fi

        # restart windowchef configuration
        elif [ $wm == windowchef ]
        then
            source ~/.config/windowchef/windowchefrc

            if  [ $input1 == --lemonbar ]
            then
               sed -i "s/$w/$input2/g" ~/.config/windowchef/windowchefrc

			kill

               . $HOME/.config/lemonbar/$input2 &
               dishown

            elif [ $input1 == --polybar ]
            then
               sed -i "s/$w2/$input2/g" ~/.config/windowchef/windowchefrc

               kill

               polybar $w2 -c ~/.config/polybar/$input &
               dishown

          elif [ -z $input1 ]
          then
			""
           else
                echo "Didn't find the panel process"

           fi

        # kill & start process of xfwm4
        elif [ $wm == Xfwm4 ]
        then
            kill `pidof xfwm4` && xfwm4 --replace & exit >/dev/null

           if [ $input1 == tint2 ]
           then

               kill
			tint2 -c ~/.config/tint2/$input.tint2rc &
               dishown

		 elif [ $input == xfce4 ]
		 then

			kill && xfce4-panel -r
			
          elif [ -z $input1 ]
          then
			""			

           else
                echo "Didn't find the panel process"

           fi

        else
            echo "Can't defined your window manager"
        fi
    fi

   reload_xrdb
    
}

# Replace preset name on .Xresources, but the file must include :
# 
#  #include ".colors/name"
#
reload_xrdb(){

     old=$(grep '.colors' ~/.Xresources | awk -F '.colors' '{print $2}'| sed 's/^.//; s/.$//')

     sed -i "s/$old/$input/g" ~/.Xresources

	xrdb -merge ~/.Xresources
	#xrdb -merge ~/.Xresources && killall -SIGHUP urxvt && urxvt & dishown
	

}


# <------------------------- backup configuration -------------------------> #

backup(){
    
        if [ -d $input ]
        then
            echo "Directory already exists"
            exit 0
        else
            echo "Creating $input directory ...."
            mkdir -p $input
        fi
    

        if local wm=$(wmctrl -m | grep Name | cut -d: -f2)
        then
            
            if [ $wm == Openbox ]
            then

                if  [ ! -z `pidof lemonbar` ]
                then
                    mkdir -p $input/panel/lemonbar

                    cp -r ~/.config/lemonbar $input/panel 2>/dev/null
            
                elif [ ! -z `pidof polybar` ]           
                then
                    mkdir -p $input/panel/polybar

                    cp -r ~/.config/polybar $input/panel 2>/dev/null     

                elif [ ! -z `pidof tint2` ]
                then
                    mkdir -p $input/panel/tint2
                    
                    cp -r ~/.config/tint2 $input/panel 2>/dev/null
                
                else
                    echo "Didn't find the panel"                    

                fi

                mkdir -p $input/openbox
                
                cp -r ~/.config/openbox $input 2>/dev/null && tar -zcvf $input.tar.gz $input

            elif [ $wm == windowchef ]
            then

                    if  [ ! -z `pidof lemonbar` ]
                    then
                         mkdir -p $input/panel/lemonbar

                         cp -r ~/.config/lemonbar $input/panel 2>/dev/null

                    elif [ ! -z `pidof polybar` ]
                    then
                         mkdir -p $input/panel/polybar

                         cp -r ~/.config/polybar $input/panel 2>/dev/null

                    else
                         echo "Didn't find the panel"

                    fi

                mkdir -p $input/windowchef

                cp -r ~/.config/windowchef $input/windowchef 2>/dev/null && tar -zcvf $input.tar.gz $input
        
            elif [ $wm == Xfwm4 ]
            then

                    if  [ ! -z `pidof lemonbar` ]
                    then
                         mkdir -p $input/panel/lemonbar

                         cp -r ~/.config/lemonbar $input/panel 2>/dev/null

                    elif [ ! -z `pidof polybar` ]
                    then
                         mkdir -p $input/panel/polybar

                         cp -r ~/.config/polybar $input/panel 2>/dev/null

                    elif [ ! -z `pidof tint2` ]
                    then
                         mkdir -p $input/panel/tint2

                         cp -r ~/.config/tint2 $input/panel 2>/dev/null

                    else
                         echo "Didn't find the panel"

                    fi

                mkdir -p $input/{xfce4,xfconf} 

                cp -r ~/.config/xfce4/terminal/terminalrc $input/xfce4

                cp -r ~/.config/xfce4/xfconf/xfce-perchannel-xml/*.xml $input/xfconf && tar -zcvf $input.tar.gz $input

            else
                echo "Window manager can't defined"

            fi
        fi

        echo -e $reset "Backup ${green}completed!${reset} your tarball is ${red}$input.tar.gz${reset}"
}   

backup_all(){
    
    if [ -d $input ]
    then
        echo "Directory already exists"
        exit 0
    else
        echo "Creating $input directory ...."
        mkdir -p $input
    fi
    
    # Window manager
    if [ -d ~/.config/openbox ]
    then
    
        mkdir -p $input/.config/openbox
        
        cp -r ~/.config/openbox $input/.config/openbox
        
        echo -e $green"[+] Saved$reset ~/.config/openbox/ to $input/.config/openbox " 
        
        sleep 0.1
         
    else
        
        echo -e $red"[-] Can't find$reset ~/.config/openbox" 
        
        sleep 0.1
     
     fi
    
    if [ -d ~/.config/windowchef ]
    then
        
        mkdir -p $input/.config/windowchef
        
        cp -r ~/.config/windowchef $input/.config/windowchef
        
        echo -e $green"[+] Saved$reset ~/.config/windowchef to $input/.config/windowchef " 
        
        sleep 0.1
    
    else
    
        echo -e $red"[-] Can't find$reset ~/.config/windowchef" 
        
        sleep 0.1
    
    fi
    
    if [ -d ~/.config/xfce4/xfconf ] && [ -d ~/.config/xfce4/xfconf]
    then
        
        mkdir -p $input/.xfce4/{xfconf,terminal}
        
        cp -r ~/.config/xfce4/{xfconf,terminal} $input/.config/xfce4/
        
        echo -e $green"[+] Saved$reset ~/.config/xfce4/xfconf to $input/.config/xfce4/xfconf " 
        
        sleep 0.1
    
        echo -e $green"[+] Saved$reset ~/.config/xfce4/terminal to $input/.config/xfce4/terminal "     
        
        sleep 0.1    

    else
    
        echo -e $red"[-] Can't find$reset ~/.config/xfce4/xfconf"
        
        sleep 0.1

        echo -e $red"[-] Can't find$reset ~/.config/xfce4/terminal" 
        
        sleep 0.1
    
    fi

    if [ -d ~/.i3/config ]
    then

        mkdir -p $input/.i3

        cp -r ~/.i3/conf $input/.config/windowchef

        echo -e $green"[+] Saved$reset ~/.i3/.config to $input/.i3/config " 
       
        sleep 0.1
  
    else
  
        echo -e $red"[-] Can't find$reset ~/.i3/config"
        
        sleep 0.1
  
    fi

    if [ -d ~/.pekwm ]
    then

        mkdir -p $input/.pekwm

        cp -r ~/.pekwm $input/.pekwm

        echo -e $green"[+] Saved$reset ~/.pekwm/ to $input/.pekwm " 
        
        sleep 0.1
  
    else
  
        echo -e $red"[-] Can't find$reset ~/.pekwm"
        
        sleep 0.1
  
    fi
     
    # Panel
    if [ -d ~/.config/lemonbar ]
    then
        
        mkdir -p $input/.config/lemonbar
        
        cp -r ~/.config/lemonbar $input/.config/lemonbar
        
        echo -e $green"[+] Saved$reset ~/.config/lemonbar to $input/.config/lemonbar " 
        
        sleep 0.1
     
    else
        
        echo -e $red"[-]$reset Can't ~/.config/lemonbar" 
        
        sleep 0.1
    
    fi
     
    if [ -d ~/.config/polybar ]
    then
        
        mkdir -p $input/.config/polybar
        
        cp -r ~/.config/polybar $input/.config/polybar
    
        echo -e $green"[+] Saved$reset ~/.config/polybar to $input/.config/polybar " 
        
        sleep 0.1
    
    else
        
        echo -e $red"[-] Can't find$reset ~/.config/polybar"
        
        sleep 0.1
    
    fi
    
    if [ -d  ~/.config/tint2 ]
    then
        
        mkdir -p $input/.config/tint2
        
        cp -r ~/.config/tint2 $input/.config/tint2
    
        echo -e $green"[+] Saved$reset ~/.config/tint2 to $input/.config/tint2 " 
        
        sleep 0.1
    
    else
        
        echo -e $red"[-] Can't find$reset ~/.config/tint2"
        
        sleep 0.1
    
    fi

    if [ -d  ~/.config/cava ]
    then
        
        mkdir -p $input/.config/cava
        
        cp -r ~/.config/cava $input/.config/cava
    
        echo -e $green"[+] Saved$reset ~/.config/cava to $input/.config/cava " 
        
        sleep 0.1
    
    else
        
        echo -e $red"[-] Can't find$reset ~/.config/cava"
        
        sleep 0.1
    
    fi
    
    if [ -d  ~/.config/compton.conf ]
    then
        
        cp -r ~/.config/compton.conf $input/.config/compton.conf
    
        echo -e $green"[+] Saved$reset ~/.config/compton.conf to $input/.config/compton.conf " 
        
        sleep 0.1
    
    else
        
        echo -e $red"[-] Can't find$reset ~/.config/compton.conf"
        
        sleep 0.1
    
    fi
    
    if [ -d  ~/.config/dunst ]
    then
        
        mkdir -p $input/.config/dunst
        
        cp -r ~/.config/cava $input/.config/dunst
    
        echo -e $green"[+] Saved$reset ~/.config/dunst to $input/.config/dunst " 
        
        sleep 0.1
    
    else
        
        echo -e $red"[-] Can't find$reset ~/.config/dunst"
        
        sleep 0.1
    
    fi
    
    if [ -d  ~/.config/jgmenu ]
    then
        
        mkdir -p $input/.config/jgmenu
        
        cp -r ~/.config/jgmenu $input/.config/jgmenu
    
        echo -e $green"[+] Saved$reset ~/.config/jgmenu to $input/.config/jgmenu " 
        
        sleep 0.1
    
    else
        
        echo -e $red"[-] Can't find$reset ~/.config/jgmenu"
        
        sleep 0.1
    
    fi
    
    if [ -d  ~/.config/obmenu-generator]
    then
        
        mkdir -p $input/.config/obmenu-generator
        
        cp -r ~/.config/obmenu-generator $input/.config/obmenu-generator
    
        echo -e $green"[+] Saved$reset ~/.config/obmenu-generator to $input/.config/obmenu-generator " 
        
        sleep 0.1
    
    else
        
        echo -e $red"[-] Can't find$reset ~/.config/obmenu-generator"
        
        sleep 0.1
    
    fi
    
    if [ -f  ~/.config/redshift.conf]
    then
        
        cp -r ~/.config/redshift.conf $input/.config/redshift.conf
    
        echo -e $green"[+] Saved$reset ~/.config/redshift.conf to $input/.config/redshift.conf " 
        
        sleep 0.1
    
    else
        
        echo -e $red"[-] Can't find$reset ~/.config/redshift.conf"
        
        sleep 0.1
    
    fi
    
    if [ -d  ~/.mpd ]
    then
        
        mkdir -p $input/.mpd
        
        cp -r ~/.mpd $input/.mpd
    
        echo -e $green"[+] Saved$reset ~/.mpd to $input/.mpd " 
        
        sleep 0.1
    
    else
        
        echo -e $red"[-] Can't find$reset ~/.ncmpcpp"
        
        sleep 0.1
    
    fi
    
    if [ -d  ~/.ncmpcpp ]
    then
        
        mkdir -p $input/.ncmpcpp
        
        cp -r ~/.ncmpcpp $input/.ncmpcpp
    
        echo -e $green"[+] Saved$reset ~/.ncmpcpp to $input/.ncmpcpp " 
        
        sleep 0.1
    
    else
        
        echo -e $red"[-] Can't find$reset ~/.ncmpcpp"
        
        sleep 0.1
    
    fi
    
    if [ -d  ~/.tmux.conf ]
    then
        
        mkdir -p $input/.tmux.conf
        
        cp -r ~/.tmux.conf $input/.tmux.conf
    
        echo -e $green"[+] Saved$reset ~/.tmux.conf to $input/.tmux.conf " 
        
        sleep 0.1
    
    else
        
        echo -e $red"[-] Can't find$reset ~/.tmux.conf"
        
        sleep 0.1
    
    fi

    if [ -d  ~/.vim ] && [ -f ~/.vimrc ]
    then
        
        mkdir -p $input/.vim
        
        cp -r ~/.vim ~/.vimrc $input
    
        echo -e $green"[+] Saved$reset ~/.vim to $input/.vim " 
        
        sleep 0.1
        
        echo -e $green"[+] Saved$reset ~/.vimrc to $input/.vimrc " 
        
        sleep 0.1
    
    else
        
        echo -e $red"[-] Can't find$reset ~/.tmux.conf"
        
        sleep 0.1
    
    fi

    # Shell
    if [ -f ~/.bashrc ]
    then
        
        cp -r ~/.bashrc $input/
    
        echo -e $green"[+] Saved$reset ~/.bashrc to $input/.bashrc " 
        
        sleep 0.1
     
    else

        echo -e $red"[-] Can't find$reset ~/.bashrc"
        
        sleep 0.1
    
    fi
    
    if [ -d ~/.config/fish ]
    then
        
        mkdir -p $input/.config/fish
        
        cp -r ~/.config/fish/config.fish $input/.config/fish
    
        echo -e $green"[+] Saved$reset ~/.config/fish/config.fish to $input/.config/fish/config.fish " 
        
        sleep 0.1
     
    else

        echo -e $red"[-] Can't find$reset ~/.bashrc"
        
        sleep 0.1
    
    fi
     
    if [ -f  ~/.zshrc ]
    then
        
        cp -r ~/.zshrc $input/
    
        echo -e $green"[+] Saved$reset ~/.zshrc to $input/.zshrc " 
        
        sleep 0.1
    
    else
    
        echo -e $red"[-] Can't find$reset ~/.zshrc"
        
        sleep 0.1
    
    fi
    
    if [ -d  ~/.oh-my-zsh ]
    then
        
        cp -r ~/.oh-my-zsh $input/.oh-my-zsh
    
        echo -e $green"[+] Saved$reset ~/.oh-my-zsh to $input/.oh-my-zsh " 
        
        sleep 0.1
    
    else
    
        echo -e $red"[-] Can't find$reset ~/.zshrc"
        
        sleep 0.1
    
    fi
    
    if [ -f ~/.Xresources ]
    then
        
        cp -r ~/.Xresources $input/
    
        echo -e $green"[+] Saved$reset ~/.Xresources  to $input/.bashrc " 
        
        sleep 0.1
        
    elif [ -f ~/.Xdefaults ]
    then
        
        cp -r ~/.Xdefaults $input/
    
        echo -e $green"[+] Saved$reset ~/.Xdefaults  to $input/.Xdefaults " 
        
        sleep 0.1
     
    else

        echo -e $red"[-] Can't find$reset ~/.Xresources and ~/.Xdefaults"
        
        sleep 0.1
    
    fi

    if [ -f  ~/.xinitrc ]
    then
        
        cp -r ~/.xinitrc $input/.xinitrc
    
        echo -e $green"[+] Saved$reset ~/.xinitrc to $input/.xinitrc " 
        
        sleep 0.1
    
    else
    
        echo -e $red"[-] Can't find$reset ~/.xinitrc"
        
        sleep 0.1
    
    fi
	

}

# <--------------------------------------------------> #


help(){ printf "%s" "\
Usage   : shift [--options] preset [--options] preset
Example : shift --themes Groove --polybar brown

Options :
     --backup-all     Backup all configuration into dotfiles.
     --backup         Backup your desktop config into tarball.
     --icons          Change GTK3 icons.
     --themes         Change setup of window manager.
     --wall           Set wallpaper to desktop.
     -v,--version     Show version.
     -h,--help        Show this help.

"
}

try(){ printf "%s" "\
No valid argument given please try -h for help"
}

version(){
    printf "%s" "\
Shift version 1.0

MIT License

Copyright (c) 2018 noirecat

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

"
}

case "$1" in
    --backup-all) 	
				backup_all;;
    --backup) 		
				backup;;
    --icons) 		
				icons;;
    --themes) 		
				themes
				reload_wm ;;
    --wall) 		
				set_wall ;;
    -v|--version) 	
				version ;;
    -h|--help)		
				help ;;
    *)  
				try ;;
esac
